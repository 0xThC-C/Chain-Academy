{
  "language": "Solidity",
  "sources": {
    "ProgressiveEscrowV7_Flattened.sol": {
      "content": "// Sources flattened with hardhat v2.24.2 https://hardhat.org\n\n// SPDX-License-Identifier: MIT\n\n// File @openzeppelin/contracts/utils/Context.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n// File @openzeppelin/contracts/interfaces/IERC165.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n\n// File @openzeppelin/contracts/interfaces/IERC1363.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Pausable.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v5.3.0\n\n// Original license: SPDX_License_Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n\n\n// File contracts/ProgressiveEscrowV7_RemixOptimized.sol\n\n// Original license: SPDX_License_Identifier: MIT\npragma solidity ^0.8.20;\n\n\n\n\n\n/**\n * @title ProgressiveEscrowV7 - REMIX OPTIMIZED\n * @dev Ultra-optimized for Remix IDE compilation - eliminates ALL stack too deep errors\n * IMPORTANT: Configure Remix with: viaIR: true, optimizer enabled, runs: 100\n */\ncontract ProgressiveEscrowV7 is Ownable, Pausable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Constants\n    uint256 public constant PLATFORM_FEE_PERCENT = 10;\n    uint256 public constant HEARTBEAT_INTERVAL = 30;\n    uint256 public constant GRACE_PERIOD = 60;\n    uint256 public constant AUTO_RELEASE_DELAY = 7 days;\n    uint256 public constant SESSION_START_TIMEOUT = 15 minutes;\n    address public constant ETH_TOKEN = address(0);\n\n    // State variables\n    address public platformWallet;\n    mapping(address => bool) public supportedTokens;\n    mapping(bytes32 => ProgressiveSession) public sessions;\n    mapping(address => uint256) public userNonces;\n    mapping(bytes32 => bool) public usedSessionIds;\n\n    enum SessionStatus { Created, Active, Paused, Completed, Cancelled, Expired }\n\n    // REMIX OPTIMIZATION: Reduced struct size to minimize memory footprint\n    struct ProgressiveSession {\n        bytes32 sessionId;\n        address student;\n        address mentor;\n        address paymentToken;\n        uint256 totalAmount;\n        uint256 releasedAmount;\n        uint256 sessionDuration;\n        uint256 startTime;\n        uint256 lastHeartbeat;\n        uint256 pausedTime;\n        uint256 createdAt;\n        SessionStatus status;\n        bool isActive;\n        bool isPaused;\n        bool surveyCompleted;\n    }\n\n    // REMIX OPTIMIZATION: Small structs for grouping parameters (max 8 fields each)\n    struct CreateParams {\n        bytes32 sessionId;\n        address mentor;\n        address paymentToken;\n        uint256 amount;\n        uint256 durationMinutes;\n        uint256 nonce;\n    }\n\n    struct PaymentCalc {\n        uint256 totalAmount;\n        uint256 releasedAmount;\n        uint256 sessionDuration;\n        uint256 elapsedMinutes;\n    }\n\n    // Events\n    event SessionCreated(bytes32 indexed sessionId, address indexed student, address indexed mentor, uint256 amount, address token);\n    event SessionStarted(bytes32 indexed sessionId, uint256 startTime);\n    event SessionPaused(bytes32 indexed sessionId, uint256 pausedAt, string reason);\n    event SessionResumed(bytes32 indexed sessionId, uint256 resumedAt);\n    event SessionCompleted(bytes32 indexed sessionId, uint256 mentorAmount, uint256 platformFee, uint256 completedAt);\n    event SessionCancelled(bytes32 indexed sessionId, uint256 refundAmount, uint256 cancelledAt);\n    event SessionExpired(bytes32 indexed sessionId, uint256 refundAmount);\n    event ProgressivePaymentReleased(bytes32 indexed sessionId, uint256 amount, uint256 totalReleased, uint256 timestamp);\n    event HeartbeatReceived(bytes32 indexed sessionId, uint256 timestamp);\n    event EmergencyRelease(bytes32 indexed sessionId, uint256 amount, string reason);\n    event TokenSupportUpdated(address token, bool supported);\n\n    constructor(address _platformWallet) Ownable(msg.sender) {\n        require(_platformWallet != address(0), \"Invalid platform wallet\");\n        platformWallet = _platformWallet;\n        supportedTokens[ETH_TOKEN] = true;\n        _autoEnableTokens();\n        emit TokenSupportUpdated(ETH_TOKEN, true);\n    }\n\n    // REMIX OPTIMIZATION: Minimal function with direct assignments\n    function _autoEnableTokens() private {\n        uint256 cId = block.chainid;\n        \n        if (cId == 42161) { // Arbitrum\n            supportedTokens[0xaf88d065e77c8cC2239327C5EDb3A432268e5831] = true;\n            supportedTokens[0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9] = true;\n        } else if (cId == 8453) { // Base  \n            supportedTokens[0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913] = true;\n            supportedTokens[0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2] = true;\n        } else if (cId == 10) { // Optimism\n            supportedTokens[0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85] = true;\n            supportedTokens[0x94b008aA00579c1307B0EF2c499aD98a8ce58e58] = true;\n        } else if (cId == 137) { // Polygon\n            supportedTokens[0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174] = true;\n            supportedTokens[0xc2132D05D31c914a87C6611C10748AEb04B58e8F] = true;\n        }\n    }\n\n    function addSupportedToken(address token) external onlyOwner {\n        supportedTokens[token] = true;\n        emit TokenSupportUpdated(token, true);\n    }\n\n    function removeSupportedToken(address token) external onlyOwner {\n        supportedTokens[token] = false;\n        emit TokenSupportUpdated(token, false);\n    }\n\n    function getUserNonce(address user) external view returns (uint256) {\n        return userNonces[user];\n    }\n\n    // REMIX OPTIMIZATION: Single parameter struct to avoid parameter limit\n    function createProgressiveSession(\n        bytes32 sessionId,\n        address mentor,\n        address paymentToken,\n        uint256 amount,\n        uint256 durationMinutes,\n        uint256 nonce\n    ) external payable nonReentrant whenNotPaused {\n        \n        // Create struct within function to minimize stack usage\n        CreateParams memory p = CreateParams(sessionId, mentor, paymentToken, amount, durationMinutes, nonce);\n        \n        // All validations in single block\n        {\n            require(p.mentor != address(0) && p.mentor != msg.sender, \"Invalid mentor\");\n            require(supportedTokens[p.paymentToken], \"Unsupported token\");\n            require(p.amount > 0 && p.durationMinutes > 0, \"Invalid amounts\");\n            require(sessions[p.sessionId].student == address(0), \"Session exists\");\n            require(p.nonce == userNonces[msg.sender], \"Invalid nonce\");\n            require(!usedSessionIds[p.sessionId], \"Session ID used\");\n        }\n        \n        // Handle payment in separate block\n        {\n            userNonces[msg.sender]++;\n            if (p.paymentToken == ETH_TOKEN) {\n                require(msg.value == p.amount, \"ETH mismatch\");\n            } else {\n                require(msg.value == 0, \"No ETH for ERC20\");\n                IERC20(p.paymentToken).safeTransferFrom(msg.sender, address(this), p.amount);\n            }\n        }\n        \n        // Initialize session\n        _initSession(p);\n    }\n\n    // REMIX OPTIMIZATION: Separate initialization to reduce main function complexity\n    function _initSession(CreateParams memory p) private {\n        usedSessionIds[p.sessionId] = true;\n        \n        ProgressiveSession storage s = sessions[p.sessionId];\n        s.sessionId = p.sessionId;\n        s.student = msg.sender;\n        s.mentor = p.mentor;\n        s.paymentToken = p.paymentToken;\n        s.totalAmount = p.amount;\n        s.sessionDuration = p.durationMinutes;\n        s.createdAt = block.timestamp;\n        s.status = SessionStatus.Created;\n        \n        emit SessionCreated(p.sessionId, msg.sender, p.mentor, p.amount, p.paymentToken);\n    }\n\n    function startProgressiveSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Created, \"Already started\");\n        require(msg.sender == s.student || msg.sender == s.mentor, \"Not participant\");\n        require(block.timestamp <= s.createdAt + SESSION_START_TIMEOUT, \"Timeout exceeded\");\n\n        s.status = SessionStatus.Active;\n        s.startTime = block.timestamp;\n        s.lastHeartbeat = block.timestamp;\n        s.isActive = true;\n\n        emit SessionStarted(sessionId, block.timestamp);\n    }\n\n    function checkAndExpireSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Created, \"Already started\");\n        require(block.timestamp > s.createdAt + SESSION_START_TIMEOUT, \"Not expired\");\n\n        s.status = SessionStatus.Expired;\n        _transfer(s.paymentToken, s.student, s.totalAmount);\n        emit SessionExpired(sessionId, s.totalAmount);\n    }\n\n    // REMIX OPTIMIZATION: Ultra-simplified payment release\n    function releaseProgressivePayment(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Active && s.isActive && !s.isPaused, \"Not active\");\n        require(msg.sender == s.student || msg.sender == s.mentor, \"Not participant\");\n\n        uint256 releaseAmount;\n        \n        // Single scoped block for all calculations\n        {\n            PaymentCalc memory calc = PaymentCalc(s.totalAmount, s.releasedAmount, s.sessionDuration, _getElapsed(sessionId));\n            \n            uint256 maxReleasable = (calc.totalAmount * 90) / 100;\n            uint256 progressiveMax = (calc.totalAmount * 90 * calc.elapsedMinutes) / (calc.sessionDuration * 100);\n            \n            if (progressiveMax > maxReleasable) progressiveMax = maxReleasable;\n            require(progressiveMax > calc.releasedAmount, \"No payment available\");\n            \n            releaseAmount = progressiveMax - calc.releasedAmount;\n        }\n\n        s.releasedAmount += releaseAmount;\n        _transfer(s.paymentToken, s.mentor, releaseAmount);\n        emit ProgressivePaymentReleased(sessionId, releaseAmount, s.releasedAmount, block.timestamp);\n    }\n\n    function updateHeartbeat(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Active, \"Not active\");\n        require(msg.sender == s.student || msg.sender == s.mentor, \"Not participant\");\n        \n        s.lastHeartbeat = block.timestamp;\n        \n        if (s.isPaused) {\n            s.pausedTime += block.timestamp - s.lastHeartbeat;\n            s.isPaused = false;\n            s.status = SessionStatus.Active;\n            emit SessionResumed(sessionId, block.timestamp);\n        }\n        \n        emit HeartbeatReceived(sessionId, block.timestamp);\n    }\n\n    function pauseSession(bytes32 sessionId) public nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Active && !s.isPaused, \"Cannot pause\");\n        \n        bool isParticipant = (msg.sender == s.student || msg.sender == s.mentor);\n        bool isTimeout = block.timestamp > s.lastHeartbeat + HEARTBEAT_INTERVAL + GRACE_PERIOD;\n        \n        require(isParticipant || isTimeout, \"Unauthorized\");\n\n        s.isPaused = true;\n        s.status = SessionStatus.Paused;\n        \n        if (isParticipant && !isTimeout) {\n            s.lastHeartbeat = block.timestamp;\n        }\n        \n        emit SessionPaused(sessionId, block.timestamp, isTimeout ? \"Heartbeat timeout\" : \"Manual pause\");\n    }\n\n    function resumeSession(bytes32 sessionId) public nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Paused, \"Not paused\");\n        require(msg.sender == s.student || msg.sender == s.mentor, \"Not participant\");\n\n        s.pausedTime += block.timestamp - s.lastHeartbeat;\n        s.isPaused = false;\n        s.status = SessionStatus.Active;\n        s.lastHeartbeat = block.timestamp;\n\n        emit SessionResumed(sessionId, block.timestamp);\n    }\n\n    function completeSession(bytes32 sessionId, uint256 rating, string calldata) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(msg.sender == s.student, \"Only student\");\n        require(s.status == SessionStatus.Active || s.status == SessionStatus.Paused, \"Not ready\");\n        require(rating >= 1 && rating <= 5, \"Invalid rating\");\n\n        _finalize(sessionId);\n    }\n\n    function autoCompleteSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Active || s.status == SessionStatus.Paused, \"Not eligible\");\n        require(block.timestamp >= s.createdAt + AUTO_RELEASE_DELAY, \"Too early\");\n\n        _finalize(sessionId);\n    }\n\n    // REMIX OPTIMIZATION: Minimal finalization function\n    function _finalize(bytes32 sessionId) private {\n        ProgressiveSession storage s = sessions[sessionId];\n        s.status = SessionStatus.Completed;\n        s.surveyCompleted = true;\n        s.isActive = false;\n        \n        uint256 remaining = s.totalAmount - s.releasedAmount;\n        if (remaining > 0) {\n            uint256 fee = (remaining * PLATFORM_FEE_PERCENT) / 100;\n            uint256 mentorAmount = remaining - fee;\n            \n            s.releasedAmount = s.totalAmount;\n            \n            if (mentorAmount > 0) _transfer(s.paymentToken, s.mentor, mentorAmount);\n            if (fee > 0) _transfer(s.paymentToken, platformWallet, fee);\n            \n            emit SessionCompleted(sessionId, mentorAmount, fee, block.timestamp);\n        } else {\n            emit SessionCompleted(sessionId, 0, 0, block.timestamp);\n        }\n    }\n\n    function cancelSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(s.status == SessionStatus.Created, \"Already started\");\n        require(msg.sender == s.student || msg.sender == s.mentor, \"Not participant\");\n\n        s.status = SessionStatus.Cancelled;\n        uint256 refund = s.totalAmount - s.releasedAmount;\n        s.releasedAmount = s.totalAmount;\n\n        _transfer(s.paymentToken, s.student, refund);\n        emit SessionCancelled(sessionId, refund, block.timestamp);\n    }\n\n    // REMIX OPTIMIZATION: Simplified transfer function\n    function _transfer(address token, address to, uint256 amount) internal {\n        if (token == ETH_TOKEN) {\n            (bool success, ) = payable(to).call{value: amount}(\"\");\n            require(success, \"ETH failed\");\n        } else {\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n\n    // REMIX OPTIMIZATION: Single calculation function with minimal variables\n    function _getElapsed(bytes32 sessionId) internal view returns (uint256) {\n        ProgressiveSession storage s = sessions[sessionId];\n        if (s.startTime == 0) return 0;\n        \n        uint256 total = block.timestamp - s.startTime;\n        uint256 paused = s.pausedTime;\n        \n        if (s.isPaused && s.lastHeartbeat > 0) {\n            paused += block.timestamp - s.lastHeartbeat;\n        }\n        \n        return total <= paused ? 0 : (total - paused) / 60;\n    }\n\n    // Public/External view functions\n    function calculateMaxRelease(uint256 totalAmount, uint256 elapsedMinutes, uint256 durationMinutes) public pure returns (uint256) {\n        if (elapsedMinutes == 0 || durationMinutes == 0) return 0;\n        uint256 maxRel = (totalAmount * 90 * elapsedMinutes) / (durationMinutes * 100);\n        return maxRel > (totalAmount * 90) / 100 ? (totalAmount * 90) / 100 : maxRel;\n    }\n\n    function getEffectiveElapsedTime(bytes32 sessionId) public view returns (uint256) {\n        return _getElapsed(sessionId);\n    }\n\n    function needsHeartbeat(bytes32 sessionId) external view returns (bool) {\n        ProgressiveSession storage s = sessions[sessionId];\n        return (s.status == SessionStatus.Active && s.lastHeartbeat > 0 && block.timestamp > s.lastHeartbeat + HEARTBEAT_INTERVAL);\n    }\n\n    function shouldAutoPause(bytes32 sessionId) external view returns (bool) {\n        ProgressiveSession storage s = sessions[sessionId];\n        return (s.status == SessionStatus.Active && !s.isPaused && s.lastHeartbeat > 0 && block.timestamp > s.lastHeartbeat + HEARTBEAT_INTERVAL + GRACE_PERIOD);\n    }\n\n    function getAvailablePayment(bytes32 sessionId) external view returns (uint256) {\n        ProgressiveSession storage s = sessions[sessionId];\n        \n        if (s.status != SessionStatus.Active || s.isPaused || s.startTime == 0) return 0;\n        \n        uint256 elapsed = _getElapsed(sessionId);\n        if (elapsed == 0 || s.sessionDuration == 0) return 0;\n        \n        uint256 maxRel = (s.totalAmount * 90 * elapsed) / (s.sessionDuration * 100);\n        uint256 releasable = (s.totalAmount * 90) / 100;\n        \n        if (maxRel > releasable) maxRel = releasable;\n        return maxRel > s.releasedAmount ? maxRel - s.releasedAmount : 0;\n    }\n\n    function getSession(bytes32 sessionId) external view returns (ProgressiveSession memory) {\n        return sessions[sessionId];\n    }\n\n    // Admin functions\n    function emergencyRelease(bytes32 sessionId, address recipient, uint256 amount, string calldata reason) external onlyOwner nonReentrant {\n        ProgressiveSession storage s = sessions[sessionId];\n        require(s.student != address(0), \"Session missing\");\n        require(recipient != address(0), \"Invalid recipient\");\n        require(amount <= s.totalAmount - s.releasedAmount, \"Exceeds available\");\n\n        s.releasedAmount += amount;\n        _transfer(s.paymentToken, recipient, amount);\n        emit EmergencyRelease(sessionId, amount, reason);\n    }\n\n    function updatePlatformWallet(address newWallet) external onlyOwner {\n        require(newWallet != address(0), \"Invalid wallet\");\n        platformWallet = newWallet;\n    }\n\n    function isTokenSupported(address token) external view returns (bool) {\n        return supportedTokens[token];\n    }\n\n    function emergencyWithdrawETH(address payable to, uint256 amount) external onlyOwner {\n        require(to != address(0) && amount <= address(this).balance, \"Invalid\");\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Failed\");\n    }\n\n    function emergencyWithdrawToken(address token, address to, uint256 amount) external onlyOwner {\n        require(to != address(0) && token != address(0), \"Invalid\");\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    function pause() external onlyOwner { _pause(); }\n    function unpause() external onlyOwner { _unpause(); }\n\n    receive() external payable {}\n    fallback() external payable { revert(\"Function not found\"); }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "viaIR": true,
    "evmVersion": "paris",
    "metadata": {
      "bytecodeHash": "none"
    },
    "outputSelection": {
      "ProgressiveEscrowV7_Flattened.sol": {
        "ProgressiveEscrowV7": ["abi", "evm.bytecode", "evm.deployedBytecode"]
      }
    }
  }
}