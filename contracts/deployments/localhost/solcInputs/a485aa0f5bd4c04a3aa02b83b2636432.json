{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Mentorship.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Mentorship\n * @dev Smart contract for Chain Academy V2 mentorship platform\n * Handles escrow, payment distribution, and multi-token support\n */\ncontract Mentorship is ReentrancyGuard, Pausable, Ownable {\n    using SafeERC20 for IERC20;\n\n    // Constants\n    uint256 public constant PLATFORM_FEE_PERCENTAGE = 10; // 10%\n    uint256 public constant MENTOR_PERCENTAGE = 90; // 90%\n    uint256 public constant PERCENTAGE_BASE = 100;\n\n    // Supported payment tokens\n    mapping(address => bool) public supportedTokens;\n    \n    // Platform fee recipient\n    address public platformFeeRecipient;\n\n    // Mentorship session structure\n    struct MentorshipSession {\n        address mentor;\n        address mentee;\n        address paymentToken;\n        uint256 amount;\n        uint256 startTime;\n        uint256 duration;\n        SessionStatus status;\n    }\n\n    // Session status enum\n    enum SessionStatus {\n        None,\n        Scheduled,\n        Completed,\n        Cancelled,\n        Disputed\n    }\n\n    // Session counter for unique IDs\n    uint256 public nextSessionId;\n\n    // Mapping from session ID to session details\n    mapping(uint256 => MentorshipSession) public sessions;\n\n    // Mapping from mentor address to their session IDs\n    mapping(address => uint256[]) public mentorSessions;\n\n    // Mapping from mentee address to their session IDs\n    mapping(address => uint256[]) public menteeSessions;\n\n    // Events\n    event SessionCreated(\n        uint256 indexed sessionId,\n        address indexed mentor,\n        address indexed mentee,\n        address paymentToken,\n        uint256 amount,\n        uint256 startTime,\n        uint256 duration\n    );\n\n    event SessionCompleted(\n        uint256 indexed sessionId,\n        uint256 mentorAmount,\n        uint256 platformAmount\n    );\n\n    event SessionCancelled(uint256 indexed sessionId);\n\n    event TokenAdded(address indexed token);\n    event TokenRemoved(address indexed token);\n    event PlatformFeeRecipientUpdated(address indexed newRecipient);\n\n    // Modifiers\n    modifier onlyValidToken(address token) {\n        require(supportedTokens[token], \"Token not supported\");\n        _;\n    }\n\n    modifier onlySessionParticipant(uint256 sessionId) {\n        MentorshipSession storage session = sessions[sessionId];\n        require(\n            msg.sender == session.mentor || msg.sender == session.mentee,\n            \"Not session participant\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Constructor\n     * @param _platformFeeRecipient Address to receive platform fees\n     */\n    constructor(address _platformFeeRecipient) Ownable(msg.sender) {\n        require(_platformFeeRecipient != address(0), \"Invalid fee recipient\");\n        platformFeeRecipient = _platformFeeRecipient;\n    }\n\n    /**\n     * @dev Create a new mentorship session with escrow\n     * @param mentor Address of the mentor\n     * @param paymentToken Address of the payment token (USDT/USDC)\n     * @param amount Payment amount\n     * @param startTime Session start time\n     * @param duration Session duration in seconds\n     */\n    function createSession(\n        address mentor,\n        address paymentToken,\n        uint256 amount,\n        uint256 startTime,\n        uint256 duration\n    ) external nonReentrant whenNotPaused onlyValidToken(paymentToken) returns (uint256) {\n        require(mentor != address(0) && mentor != msg.sender, \"Invalid mentor\");\n        require(amount > 0, \"Invalid amount\");\n        require(startTime > block.timestamp, \"Invalid start time\");\n        require(duration > 0, \"Invalid duration\");\n\n        // Create session FIRST (checks-effects-interactions pattern)\n        uint256 sessionId = nextSessionId++;\n        sessions[sessionId] = MentorshipSession({\n            mentor: mentor,\n            mentee: msg.sender,\n            paymentToken: paymentToken,\n            amount: amount,\n            startTime: startTime,\n            duration: duration,\n            status: SessionStatus.Scheduled\n        });\n\n        // Add to participant mappings\n        mentorSessions[mentor].push(sessionId);\n        menteeSessions[msg.sender].push(sessionId);\n\n        // Transfer tokens to escrow LAST (after all state changes)\n        IERC20(paymentToken).safeTransferFrom(msg.sender, address(this), amount);\n\n        emit SessionCreated(\n            sessionId,\n            mentor,\n            msg.sender,\n            paymentToken,\n            amount,\n            startTime,\n            duration\n        );\n\n        return sessionId;\n    }\n\n    /**\n     * @dev Complete a mentorship session and distribute payments\n     * @param sessionId ID of the session to complete\n     */\n    function completeSession(uint256 sessionId) \n        external \n        nonReentrant \n        onlySessionParticipant(sessionId) \n    {\n        MentorshipSession storage session = sessions[sessionId];\n        require(session.status == SessionStatus.Scheduled, \"Invalid session status\");\n        require(\n            block.timestamp >= session.startTime + session.duration,\n            \"Session not finished\"\n        );\n\n        session.status = SessionStatus.Completed;\n\n        // Calculate payment distribution\n        uint256 platformAmount = (session.amount * PLATFORM_FEE_PERCENTAGE) / PERCENTAGE_BASE;\n        uint256 mentorAmount = session.amount - platformAmount;\n\n        // Transfer payments\n        IERC20(session.paymentToken).safeTransfer(session.mentor, mentorAmount);\n        IERC20(session.paymentToken).safeTransfer(platformFeeRecipient, platformAmount);\n\n        emit SessionCompleted(sessionId, mentorAmount, platformAmount);\n    }\n\n    /**\n     * @dev Cancel a mentorship session before it starts\n     * @param sessionId ID of the session to cancel\n     */\n    function cancelSession(uint256 sessionId) \n        external \n        nonReentrant \n        onlySessionParticipant(sessionId) \n    {\n        MentorshipSession storage session = sessions[sessionId];\n        require(session.status == SessionStatus.Scheduled, \"Invalid session status\");\n        require(block.timestamp < session.startTime, \"Session already started\");\n\n        session.status = SessionStatus.Cancelled;\n\n        // Refund mentee\n        IERC20(session.paymentToken).safeTransfer(session.mentee, session.amount);\n\n        emit SessionCancelled(sessionId);\n    }\n\n    /**\n     * @dev Add a supported payment token\n     * @param token Address of the token to add\n     */\n    function addSupportedToken(address token) external onlyOwner {\n        require(token != address(0), \"Invalid token address\");\n        supportedTokens[token] = true;\n        emit TokenAdded(token);\n    }\n\n    /**\n     * @dev Remove a supported payment token\n     * @param token Address of the token to remove\n     */\n    function removeSupportedToken(address token) external onlyOwner {\n        supportedTokens[token] = false;\n        emit TokenRemoved(token);\n    }\n\n    /**\n     * @dev Update platform fee recipient\n     * @param newRecipient New recipient address\n     */\n    function updatePlatformFeeRecipient(address newRecipient) external onlyOwner {\n        require(newRecipient != address(0), \"Invalid recipient\");\n        platformFeeRecipient = newRecipient;\n        emit PlatformFeeRecipientUpdated(newRecipient);\n    }\n\n    /**\n     * @dev Pause the contract\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Get mentor's session IDs\n     * @param mentor Address of the mentor\n     */\n    function getMentorSessions(address mentor) external view returns (uint256[] memory) {\n        return mentorSessions[mentor];\n    }\n\n    /**\n     * @dev Get mentee's session IDs\n     * @param mentee Address of the mentee\n     */\n    function getMenteeSessions(address mentee) external view returns (uint256[] memory) {\n        return menteeSessions[mentee];\n    }\n\n    /**\n     * @dev Get session details\n     * @param sessionId ID of the session\n     */\n    function getSession(uint256 sessionId) external view returns (MentorshipSession memory) {\n        return sessions[sessionId];\n    }\n}"
    },
    "contracts/MentorshipFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./Mentorship.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MentorshipFactory\n * @dev Factory contract for deploying Mentorship contracts across multiple chains\n * Provides consistent deployment and management across all supported networks\n */\ncontract MentorshipFactory is Ownable {\n    // Events\n    event MentorshipDeployed(\n        address indexed mentorshipContract,\n        address indexed platformFeeRecipient,\n        uint256 timestamp\n    );\n\n    // Array of deployed Mentorship contracts\n    address[] public deployedContracts;\n    \n    // Mapping to check if an address is a valid Mentorship contract from this factory\n    mapping(address => bool) public isValidContract;\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Deploy a new Mentorship contract\n     * @param platformFeeRecipient Address to receive platform fees\n     * @return mentorshipAddress Address of the deployed Mentorship contract\n     */\n    function deployMentorship(address platformFeeRecipient) \n        external \n        onlyOwner \n        returns (address mentorshipAddress) \n    {\n        require(platformFeeRecipient != address(0), \"Invalid fee recipient\");\n\n        // Deploy new Mentorship contract\n        Mentorship mentorship = new Mentorship(platformFeeRecipient);\n        mentorshipAddress = address(mentorship);\n\n        // Add to tracking\n        deployedContracts.push(mentorshipAddress);\n        isValidContract[mentorshipAddress] = true;\n\n        emit MentorshipDeployed(mentorshipAddress, platformFeeRecipient, block.timestamp);\n\n        return mentorshipAddress;\n    }\n\n    /**\n     * @dev Get all deployed Mentorship contracts\n     * @return Array of deployed contract addresses\n     */\n    function getDeployedContracts() external view returns (address[] memory) {\n        return deployedContracts;\n    }\n\n    /**\n     * @dev Get the number of deployed contracts\n     * @return Number of deployed contracts\n     */\n    function getDeployedContractsCount() external view returns (uint256) {\n        return deployedContracts.length;\n    }\n\n    /**\n     * @dev Get the latest deployed contract\n     * @return Address of the most recently deployed contract\n     */\n    function getLatestContract() external view returns (address) {\n        require(deployedContracts.length > 0, \"No contracts deployed\");\n        return deployedContracts[deployedContracts.length - 1];\n    }\n\n    /**\n     * @dev Batch setup for newly deployed Mentorship contract\n     * @param mentorshipAddress Address of the Mentorship contract\n     * @param supportedTokens Array of token addresses to add as supported\n     */\n    function setupMentorship(\n        address mentorshipAddress,\n        address[] calldata supportedTokens\n    ) external onlyOwner {\n        require(isValidContract[mentorshipAddress], \"Invalid contract address\");\n        \n        Mentorship mentorship = Mentorship(mentorshipAddress);\n        \n        // Add supported tokens\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\n            mentorship.addSupportedToken(supportedTokens[i]);\n        }\n    }\n\n    /**\n     * @dev Emergency pause for a specific Mentorship contract\n     * @param mentorshipAddress Address of the Mentorship contract to pause\n     */\n    function emergencyPause(address mentorshipAddress) external onlyOwner {\n        require(isValidContract[mentorshipAddress], \"Invalid contract address\");\n        Mentorship(mentorshipAddress).pause();\n    }\n\n    /**\n     * @dev Emergency unpause for a specific Mentorship contract\n     * @param mentorshipAddress Address of the Mentorship contract to unpause\n     */\n    function emergencyUnpause(address mentorshipAddress) external onlyOwner {\n        require(isValidContract[mentorshipAddress], \"Invalid contract address\");\n        Mentorship(mentorshipAddress).unpause();\n    }\n}"
    },
    "contracts/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockERC20\n * @dev Mock ERC20 token for testing purposes\n */\ncontract MockERC20 is ERC20 {\n    uint8 private _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) external {\n        _burn(from, amount);\n    }\n}"
    },
    "contracts/ProgressiveEscrowV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title ProgressiveEscrowV3\n * @dev Revolutionary progressive payment system for mentorship sessions\n * \n * Payment Flow:\n * - Continuous release proportional to time elapsed (e.g., $100/hour = $5 every 3 minutes)\n * - Uses blockchain timestamp (block.timestamp) as source of truth\n * - Heartbeat system ensures session is active\n * - Auto-pause payment if WebRTC connection drops\n * - Grace period of 2 minutes for reconnection before pausing\n */\ncontract ProgressiveEscrowV3 is ReentrancyGuard, Pausable, Ownable {\n    using SafeERC20 for IERC20;\n\n    // Session status enum\n    enum SessionStatus {\n        Created,        // Session booked, payment escrowed\n        Active,         // Session started, progressive payments enabled\n        Paused,         // Session paused (connection lost)\n        Completed,      // Session completed, final payment released\n        Cancelled       // Session cancelled, refund issued\n    }\n\n    // Progressive session structure\n    struct ProgressiveSession {\n        bytes32 sessionId;\n        address student;\n        address mentor;\n        address paymentToken;    // USDC or USDT\n        uint256 totalAmount;\n        uint256 releasedAmount;\n        uint256 sessionDuration; // in minutes\n        uint256 startTime;\n        uint256 lastHeartbeat;\n        uint256 pausedTime;      // Total time paused (cumulative)\n        uint256 createdAt;\n        SessionStatus status;\n        bool isActive;\n        bool isPaused;\n        bool surveyCompleted;\n    }\n\n    // Constants\n    uint256 public constant PLATFORM_FEE_PERCENT = 10; // 10%\n    uint256 public constant HEARTBEAT_INTERVAL = 30; // 30 seconds\n    uint256 public constant GRACE_PERIOD = 120; // 2 minutes\n    uint256 public constant PROGRESSIVE_RELEASE_INTERVAL = 180; // 3 minutes\n    uint256 public constant AUTO_RELEASE_DELAY = 7 days;\n\n    // State variables\n    mapping(bytes32 => ProgressiveSession) public sessions;\n    mapping(address => bool) public supportedTokens;\n    address public platformWallet;\n    \n    // Replay protection\n    mapping(address => uint256) public userNonces;\n    mapping(bytes32 => bool) public usedSessionIds;\n    \n    // Events\n    event SessionCreated(\n        bytes32 indexed sessionId,\n        address indexed student,\n        address indexed mentor,\n        uint256 amount,\n        address token\n    );\n    \n    event SessionStarted(\n        bytes32 indexed sessionId,\n        uint256 timestamp\n    );\n    \n    event ProgressivePaymentReleased(\n        bytes32 indexed sessionId,\n        uint256 releasedAmount,\n        uint256 totalReleased,\n        uint256 timestamp\n    );\n    \n    event SessionPaused(\n        bytes32 indexed sessionId,\n        uint256 timestamp,\n        string reason\n    );\n    \n    event SessionResumed(\n        bytes32 indexed sessionId,\n        uint256 timestamp\n    );\n    \n    event SessionCompleted(\n        bytes32 indexed sessionId,\n        uint256 finalAmount,\n        uint256 platformFee,\n        uint256 timestamp\n    );\n    \n    event SessionCancelled(\n        bytes32 indexed sessionId,\n        uint256 refundAmount,\n        uint256 timestamp\n    );\n    \n    event HeartbeatReceived(\n        bytes32 indexed sessionId,\n        uint256 timestamp\n    );\n\n    event EmergencyRelease(\n        bytes32 indexed sessionId,\n        uint256 amount,\n        string reason\n    );\n\n    constructor(address _platformWallet) Ownable(msg.sender) {\n        require(_platformWallet != address(0), \"Invalid platform wallet\");\n        platformWallet = _platformWallet;\n    }\n\n    /**\n     * @dev Add supported payment token (USDC/USDT)\n     */\n    function addSupportedToken(address token) external onlyOwner {\n        require(token != address(0), \"Invalid token address\");\n        supportedTokens[token] = true;\n    }\n\n    /**\n     * @dev Remove supported payment token\n     */\n    function removeSupportedToken(address token) external onlyOwner {\n        supportedTokens[token] = false;\n    }\n    \n    /**\n     * @dev Get current nonce for user (for frontend to use)\n     */\n    function getUserNonce(address user) external view returns (uint256) {\n        return userNonces[user];\n    }\n\n    /**\n     * @dev Create new progressive mentorship session with escrowed payment\n     * @param nonce User nonce for replay protection\n     */\n    function createProgressiveSession(\n        bytes32 sessionId,\n        address mentor,\n        address paymentToken,\n        uint256 amount,\n        uint256 durationMinutes,\n        uint256 nonce\n    ) external nonReentrant whenNotPaused {\n        require(mentor != address(0), \"Invalid mentor address\");\n        require(mentor != msg.sender, \"Cannot mentor yourself\");\n        require(supportedTokens[paymentToken], \"Unsupported payment token\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(durationMinutes > 0, \"Duration must be greater than 0\");\n        require(sessions[sessionId].student == address(0), \"Session already exists\");\n        \n        // Replay protection\n        require(nonce == userNonces[msg.sender], \"Invalid nonce\");\n        require(!usedSessionIds[sessionId], \"Session ID already used\");\n        \n        // Update nonce and mark session ID as used\n        userNonces[msg.sender]++;\n        usedSessionIds[sessionId] = true;\n\n        // Transfer payment to escrow\n        IERC20(paymentToken).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Create progressive session\n        sessions[sessionId] = ProgressiveSession({\n            sessionId: sessionId,\n            student: msg.sender,\n            mentor: mentor,\n            paymentToken: paymentToken,\n            totalAmount: amount,\n            releasedAmount: 0,\n            sessionDuration: durationMinutes,\n            startTime: 0,\n            lastHeartbeat: 0,\n            pausedTime: 0,\n            createdAt: block.timestamp,\n            status: SessionStatus.Created,\n            isActive: false,\n            isPaused: false,\n            surveyCompleted: false\n        });\n\n        emit SessionCreated(sessionId, msg.sender, mentor, amount, paymentToken);\n    }\n\n    /**\n     * @dev Start progressive session\n     * Called when WebRTC connection is established\n     */\n    function startProgressiveSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(session.status == SessionStatus.Created, \"Session already started or completed\");\n        require(\n            msg.sender == session.student || msg.sender == session.mentor,\n            \"Only session participants can start\"\n        );\n\n        session.status = SessionStatus.Active;\n        session.startTime = block.timestamp;\n        session.lastHeartbeat = block.timestamp;\n        session.isActive = true;\n        session.isPaused = false;\n\n        emit SessionStarted(sessionId, block.timestamp);\n    }\n\n    /**\n     * @dev Release progressive payment based on time elapsed\n     * Called every 3 minutes during active session\n     */\n    function releaseProgressivePayment(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(session.status == SessionStatus.Active, \"Session not active\");\n        require(session.isActive && !session.isPaused, \"Session not running\");\n        require(session.startTime > 0, \"Session start time not set\");\n        \n        // Verify caller is participant or authorized\n        require(\n            msg.sender == session.student || msg.sender == session.mentor,\n            \"Only session participants can release payment\"\n        );\n\n        // Check if enough time has passed for next release\n        uint256 effectiveElapsed = getEffectiveElapsedTime(sessionId);\n        uint256 maxReleaseAmount = calculateMaxRelease(session.totalAmount, effectiveElapsed, session.sessionDuration);\n        \n        require(maxReleaseAmount > session.releasedAmount, \"No payment available for release\");\n\n        // Calculate amount to release (progressive based on time)\n        uint256 releaseAmount = maxReleaseAmount - session.releasedAmount;\n        \n        // Ensure we don't exceed 90% (10% reserved for platform fee after completion)\n        uint256 maxReleasableBeforeCompletion = (session.totalAmount * 90) / 100;\n        if (session.releasedAmount + releaseAmount > maxReleasableBeforeCompletion) {\n            releaseAmount = maxReleasableBeforeCompletion - session.releasedAmount;\n        }\n\n        require(releaseAmount > 0, \"No payment to release\");\n\n        session.releasedAmount += releaseAmount;\n        IERC20(session.paymentToken).safeTransfer(session.mentor, releaseAmount);\n\n        emit ProgressivePaymentReleased(sessionId, releaseAmount, session.releasedAmount, block.timestamp);\n    }\n\n    /**\n     * @dev Update heartbeat to keep session active\n     * Called every 30 seconds by frontend\n     */\n    function updateHeartbeat(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(session.status == SessionStatus.Active, \"Session not active\");\n        require(\n            msg.sender == session.student || msg.sender == session.mentor,\n            \"Only session participants can update heartbeat\"\n        );\n\n        session.lastHeartbeat = block.timestamp;\n        \n        // Resume session if it was paused due to missed heartbeat\n        if (session.isPaused) {\n            resumeSession(sessionId);\n        }\n\n        emit HeartbeatReceived(sessionId, block.timestamp);\n    }\n\n    /**\n     * @dev Pause session (internal or external call)\n     */\n    function pauseSession(bytes32 sessionId) public nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(session.status == SessionStatus.Active, \"Session not active\");\n        require(!session.isPaused, \"Session already paused\");\n        \n        // Allow participants or automatic pause due to missed heartbeat\n        bool isParticipant = msg.sender == session.student || msg.sender == session.mentor;\n        bool isHeartbeatTimeout = block.timestamp > session.lastHeartbeat + HEARTBEAT_INTERVAL + GRACE_PERIOD;\n        \n        require(isParticipant || isHeartbeatTimeout, \"Unauthorized pause\");\n\n        session.isPaused = true;\n        session.status = SessionStatus.Paused;\n        \n        // For manual pause, set lastHeartbeat to current time to track pause start\n        if (isParticipant && !isHeartbeatTimeout) {\n            session.lastHeartbeat = block.timestamp;\n        }\n        \n        string memory reason = isHeartbeatTimeout ? \"Heartbeat timeout\" : \"Manual pause\";\n        emit SessionPaused(sessionId, block.timestamp, reason);\n    }\n\n    /**\n     * @dev Resume session\n     */\n    function resumeSession(bytes32 sessionId) public nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(session.status == SessionStatus.Paused, \"Session not paused\");\n        require(\n            msg.sender == session.student || msg.sender == session.mentor,\n            \"Only session participants can resume\"\n        );\n\n        // Calculate paused duration and add to cumulative paused time\n        uint256 pauseDuration = block.timestamp - session.lastHeartbeat;\n        session.pausedTime += pauseDuration;\n        \n        session.isPaused = false;\n        session.status = SessionStatus.Active;\n        session.lastHeartbeat = block.timestamp;\n\n        emit SessionResumed(sessionId, block.timestamp);\n    }\n\n    /**\n     * @dev Complete session with final payment and platform fee\n     */\n    function completeSession(\n        bytes32 sessionId,\n        uint256 rating,\n        string calldata feedback\n    ) external nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(msg.sender == session.student, \"Only student can complete session\");\n        require(\n            session.status == SessionStatus.Active || session.status == SessionStatus.Paused,\n            \"Session not ready for completion\"\n        );\n        require(rating >= 1 && rating <= 5, \"Rating must be between 1 and 5\");\n\n        session.status = SessionStatus.Completed;\n        session.surveyCompleted = true;\n        session.isActive = false;\n\n        // Calculate final payment\n        uint256 remainingAmount = session.totalAmount - session.releasedAmount;\n        uint256 platformFee = (remainingAmount * PLATFORM_FEE_PERCENT) / 100;\n        uint256 mentorAmount = remainingAmount - platformFee;\n\n        session.releasedAmount = session.totalAmount;\n\n        // Transfer final amounts\n        if (mentorAmount > 0) {\n            IERC20(session.paymentToken).safeTransfer(session.mentor, mentorAmount);\n        }\n        if (platformFee > 0) {\n            IERC20(session.paymentToken).safeTransfer(platformWallet, platformFee);\n        }\n\n        emit SessionCompleted(sessionId, mentorAmount, platformFee, block.timestamp);\n    }\n\n    /**\n     * @dev Auto-complete session after 7 days timeout\n     */\n    function autoCompleteSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(\n            session.status == SessionStatus.Active || session.status == SessionStatus.Paused,\n            \"Session not eligible for auto-completion\"\n        );\n        require(\n            block.timestamp >= session.createdAt + AUTO_RELEASE_DELAY,\n            \"Auto-release delay not reached\"\n        );\n\n        session.status = SessionStatus.Completed;\n        session.isActive = false;\n\n        // Calculate final payment\n        uint256 remainingAmount = session.totalAmount - session.releasedAmount;\n        uint256 platformFee = (remainingAmount * PLATFORM_FEE_PERCENT) / 100;\n        uint256 mentorAmount = remainingAmount - platformFee;\n\n        session.releasedAmount = session.totalAmount;\n\n        // Transfer final amounts\n        if (mentorAmount > 0) {\n            IERC20(session.paymentToken).safeTransfer(session.mentor, mentorAmount);\n        }\n        if (platformFee > 0) {\n            IERC20(session.paymentToken).safeTransfer(platformWallet, platformFee);\n        }\n\n        emit SessionCompleted(sessionId, mentorAmount, platformFee, block.timestamp);\n    }\n\n    /**\n     * @dev Cancel session before it starts - full refund to student\n     */\n    function cancelSession(bytes32 sessionId) external nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(session.status == SessionStatus.Created, \"Session already started\");\n        require(\n            msg.sender == session.student || msg.sender == session.mentor,\n            \"Only session participants can cancel\"\n        );\n\n        session.status = SessionStatus.Cancelled;\n\n        // Full refund to student\n        uint256 refundAmount = session.totalAmount - session.releasedAmount;\n        session.releasedAmount = session.totalAmount;\n\n        IERC20(session.paymentToken).safeTransfer(session.student, refundAmount);\n\n        emit SessionCancelled(sessionId, refundAmount, block.timestamp);\n    }\n\n    /**\n     * @dev Calculate maximum release amount based on time elapsed\n     */\n    function calculateMaxRelease(uint256 totalAmount, uint256 elapsedMinutes, uint256 durationMinutes) public pure returns (uint256) {\n        if (elapsedMinutes == 0 || durationMinutes == 0) return 0;\n        \n        // Progressive release: amount proportional to time elapsed\n        // Reserve 10% for platform fee (release 90% progressively)\n        uint256 releasableAmount = (totalAmount * 90) / 100;\n        uint256 maxRelease = (releasableAmount * elapsedMinutes) / durationMinutes;\n        \n        // Cap at 90% of total\n        if (maxRelease > releasableAmount) {\n            maxRelease = releasableAmount;\n        }\n        \n        return maxRelease;\n    }\n\n    /**\n     * @dev Get effective elapsed time (excluding paused periods)\n     */\n    function getEffectiveElapsedTime(bytes32 sessionId) public view returns (uint256) {\n        ProgressiveSession memory session = sessions[sessionId];\n        require(session.startTime > 0, \"Session not started\");\n        \n        uint256 totalElapsed = block.timestamp - session.startTime;\n        uint256 currentPausedTime = session.pausedTime;\n        \n        // If currently paused, add current pause duration\n        if (session.isPaused && session.lastHeartbeat > 0) {\n            currentPausedTime += block.timestamp - session.lastHeartbeat;\n        }\n        \n        // Effective time is total elapsed minus all paused periods\n        if (totalElapsed <= currentPausedTime) return 0;\n        \n        uint256 effectiveMinutes = (totalElapsed - currentPausedTime) / 60;\n        return effectiveMinutes;\n    }\n\n    /**\n     * @dev Check if session needs heartbeat (for auto-pause)\n     */\n    function needsHeartbeat(bytes32 sessionId) external view returns (bool) {\n        ProgressiveSession memory session = sessions[sessionId];\n        if (session.status != SessionStatus.Active || session.lastHeartbeat == 0) {\n            return false;\n        }\n        \n        return block.timestamp > session.lastHeartbeat + HEARTBEAT_INTERVAL;\n    }\n\n    /**\n     * @dev Check if session should be auto-paused\n     */\n    function shouldAutoPause(bytes32 sessionId) external view returns (bool) {\n        ProgressiveSession memory session = sessions[sessionId];\n        if (session.status != SessionStatus.Active || session.isPaused || session.lastHeartbeat == 0) {\n            return false;\n        }\n        \n        return block.timestamp > session.lastHeartbeat + HEARTBEAT_INTERVAL + GRACE_PERIOD;\n    }\n\n    /**\n     * @dev Get available payment amount for release\n     */\n    function getAvailablePayment(bytes32 sessionId) external view returns (uint256) {\n        ProgressiveSession memory session = sessions[sessionId];\n        if (session.status != SessionStatus.Active || session.isPaused || session.startTime == 0) {\n            return 0;\n        }\n        \n        uint256 effectiveElapsed = getEffectiveElapsedTime(sessionId);\n        uint256 maxRelease = calculateMaxRelease(session.totalAmount, effectiveElapsed, session.sessionDuration);\n        \n        if (maxRelease <= session.releasedAmount) return 0;\n        \n        return maxRelease - session.releasedAmount;\n    }\n\n    /**\n     * @dev Get session details\n     */\n    function getSession(bytes32 sessionId) external view returns (ProgressiveSession memory) {\n        return sessions[sessionId];\n    }\n\n    /**\n     * @dev Emergency release function (owner only)\n     */\n    function emergencyRelease(\n        bytes32 sessionId,\n        address recipient,\n        uint256 amount,\n        string calldata reason\n    ) external onlyOwner nonReentrant {\n        ProgressiveSession storage session = sessions[sessionId];\n        require(session.student != address(0), \"Session does not exist\");\n        require(recipient != address(0), \"Invalid recipient\");\n        require(amount <= session.totalAmount - session.releasedAmount, \"Amount exceeds available\");\n\n        session.releasedAmount += amount;\n        IERC20(session.paymentToken).safeTransfer(recipient, amount);\n\n        emit EmergencyRelease(sessionId, amount, reason);\n    }\n\n    /**\n     * @dev Update platform wallet (owner only)\n     */\n    function updatePlatformWallet(address newWallet) external onlyOwner {\n        require(newWallet != address(0), \"Invalid wallet address\");\n        platformWallet = newWallet;\n    }\n\n    /**\n     * @dev Pause contract (owner only)\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause contract (owner only)\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "paris"
  }
}